name: Build and Test with MongoDB

on:
  push:
    branches:
      - '*'

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Extract version from branch name
      run: |
        # Get the version from branch name
        VERSION=${GITHUB_REF#refs/heads/}
        echo "Version: $VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build MongoDB Docker image
      run: |
        docker build \
            --build-arg MONGO_VERSION=$VERSION \
        -t mongodb:$VERSION .
    
    - name: Start MongoDB container
      run: |
        docker run -d \
            --name mongodb-container \
            -p 27017:27017 \
            --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'" \
            --health-interval 10s \
            --health-timeout 5s \
            --health-retries 3 \
        mongodb:$VERSION

    - name: Wait for MongoDB to be ready
      run: |
        for i in {1..60}; do
          if docker inspect --format='{{json .State.Health.Status}}' mongodb-container | grep -q '"healthy"'; then
            echo "MongoDB is ready!";
            break;
          fi;
          echo "Waiting for MongoDB...";
          sleep 1;
        done
        if [ $i -eq 30 ]; then
          echo "MongoDB did not become healthy in time";
          exit 1;
        fi

    - name: Run smoke tests
      run: |
        echo "Testing MongoDB connection..."
        docker exec mongodb-container mongosh --eval 'db.runCommand({ ping: 1 })' || exit 1

        echo "Inserting test data..."
        docker exec mongodb-container mongosh --eval 'db.test.insertOne({ name: "test", value: 123 })' || exit 1

        echo "Verifying test data..."
        docker exec mongodb-container mongosh --eval 'const count = db.test.countDocuments({ name: "test" }); if (count !== 1) throw new Error();' || exit 1

        echo "Smoke tests passed!"
    
    - name: Trashing container
      if: always()
      run: |
        echo "Stopping MongoDB container..."
        docker stop mongodb-container || true
        docker rm mongodb-container || true

    - name: Scan for vulnerabilities
      uses: aquasecurity/trivy-action@0.28.0
      with:
        scan-type: image
        image-ref: "mongodb:${{ env.VERSION }}"
        scanners: vuln
        format: json
        output: 'trivy-report.json'
        severity: 'CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN'
        hide-progress: true
    
    - name: Display Vulnerabilities Report
      run: |
        CRIT_VULN=$(jq '[.Results[] | .Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-report.json)
        HIGH_VULN=$(jq '[.Results[] | .Vulnerabilities[]? | select(.Severity == "HIGH")]     | length' trivy-report.json)
        MED_VULN=$(jq '[.Results[]  | .Vulnerabilities[]? | select(.Severity == "MEDIUM")]   | length' trivy-report.json)
        LOW_VULN=$(jq '[.Results[]  | .Vulnerabilities[]? | select(.Severity == "LOW")]      | length' trivy-report.json)

        echo "Vulnerability Report:"
        echo "=============================================================================================================================="
        echo "Critical: $CRIT_VULN"
        echo "High:     $HIGH_VULN"
        echo "Medium:   $MED_VULN"
        echo "Low:      $LOW_VULN"
        echo "=============================================================================================================================="
        
        cat trivy-report.json | jq -r '.Results[] | .Vulnerabilities[]? | select(.Severity == "CRITICAL") | "CRITICAL - \(.VulnerabilityID) - \(.Title) - Fixed Version: \(.FixedVersion // "N/A")"'
        cat trivy-report.json | jq -r '.Results[] | .Vulnerabilities[]? | select(.Severity == "HIGH")     | "HIGH     - \(.VulnerabilityID) - \(.Title) - Fixed Version: \(.FixedVersion // "N/A")"'
        cat trivy-report.json | jq -r '.Results[] | .Vulnerabilities[]? | select(.Severity == "MEDIUM")   | "MEDIUM   - \(.VulnerabilityID) - \(.Title) - Fixed Version: \(.FixedVersion // "N/A")"'
        cat trivy-report.json | jq -r '.Results[] | .Vulnerabilities[]? | select(.Severity == "LOW")      | "LOW      - \(.VulnerabilityID) - \(.Title) - Fixed Version: \(.FixedVersion // "N/A")"'
        
        SEVERE_VULN=$(($CRIT_VULN + $HIGH_VULN))
        if [ "$SEVERE_VULN" -gt 0 ]; then
          echo "Blocking image push due to $SEVERE_VULN severe vulnerabilities (critical, high)"
          exit 1
        fi
      shell: bash

    # - name: Block image push if there is severe vulnerabilities
    #   uses: aquasecurity/trivy-action@0.28.0
    #   with:
    #     scan-type: image
    #     image-ref: "mongodb:${{ env.VERSION }}"
    #     scanners: vuln
    #     format: template
    #     template: "{{ range . }}{{- range .Vulnerabilities }}{{- $vuln = add $vuln 1 }}{{ end }}"
    #     severity: 'CRITICAL,HIGH'
    #     hide-progress: true
    #     exit-code: 1